param (
    [Parameter(
        HelpMessage = "Threshold to Monitor"
    )]
    [int]$ThresholdDays = 30,

    [Parameter(
        HelpMessage = "The User Managed Identity Client ID with sufficent permissions; recommend a custom role.")]
    [string]$IdentityID = "8af344ab-21dd-45f7-83dc-6f6230d6da28"

)

# CONNECTION: #########################################################
Write-Output "[ START ] ########################################"
Write-Output "Searching for App Registrations that have certificates or secrets expiring within [ $ThresholdDays ] days..."
$([Char]13)

Write-Output "[ CONNECTION ]"
Write-Output "Set Connection Context..."
Write-Output ("{0}{1}" -f $([Char]9), "Disable Autosave Context...")
[void](Disable-AzContextAutosave -Scope Process)

Write-Output ("{0}{1}" -f $([Char]9), "Connecting Managed Identity [ $IdentityID ]...")
$AzureContext = (Connect-AzAccount -Identity -AccountId $IdentityID ).context

Write-Output ("{0}{1}" -f $([Char]9), "Connected. Set and Store Azure Context...")
$AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

Write-Output ("{0}{1}" -f $([Char]9), "Connecting Azure AD...")
Import-Module AzureADPreview
$AADToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($AzureContext.Account, $AzureContext.Environment, $AzureContext.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://graph.windows.net").AccessToken
# TODO: Get Az version of token working. Currently presenting a 400 Error where token malformed.
# $AADToken = Get-AzAccessToken -ResourceTypeName AadGraph
[void](Connect-AzureAd -AADAccessToken $AADToken -AccountId $AzureContext.Account.Id -TenantID $AzureContext.Tenant.Id)

# Definitions: ################################################################
$Now = Get-Date
$Threshold = ($Now).AddDays($ThresholdDays)

# Collection: -----------------------------------------------------------------
try {
    $([Char]13)
    Write-Output "[ App Registrations ]"
    Write-Output "Searching App Registrations for expiring or expired secrets or certificates..."

    $Collection = Get-AzureAdApplication -All $true

    $OffSet = 0 - ($Collection.DisplayName | Measure-Object -Maximum -Property Length).Maximum - 5

    $Certificate = $Collection.Where({ ($_.KeyCredentials ) -and ( $_.KeyCredentials.EndDate -lt $Threshold ) })
    $Secret = $Collection.Where({ ($_.PasswordCredentials ) -and ( $_.PasswordCredentials.EndDate -lt $Threshold ) })

} catch {
    Write-Error $($Error[0].Exception.Message)
}

# ACTION: #####################################################################
$([Char]13)
Write-Output "[ App Registration Keys ]"
Write-Output "App Registrations with expiring or expired certificates [ $($Certificate.Count) ]"

foreach ($item in $Certificate) {
    $CertificateObject = [PSCustomObject][Ordered]@{
        Type     = "Certificate"
        Name     = $item.DisplayName
        AppId    = $item.AppId
        DaysLeft = ($item.KeyCredentials.EndDate -lt $Now) ? "Expired" : ($item.KeyCredentials.EndDate - $now).days

    }

    Write-Output ("{0}{1, $Offset} {2}" -f $([Char]9), "[ $($item.DisplayName) ]", $CertificateObject.DaysLeft)

    # $CertificateObject
}

$([Char]13)
Write-Output "[ App Registration Passwords ]"
Write-Output "App Registrations with expiring or expired passwords [ $($Secret.Count) ]"
foreach ($item in $Secret) {
    $SecretObject = [PSCustomObject][Ordered]@{
        Type     = "Secret"
        Name     = $item.DisplayName
        AppId    = $item.AppId
        DaysLeft = ($item.PasswordCredentials.EndDate -lt $Now) ? "Expired" : ($item.PasswordCredentials.EndDate - $now).days

    }

    Write-Output ("{0}{1,$Offset} {2}" -f $([Char]9), "[ $($item.DisplayName) ]", $SecretObject.DaysLeft)

    # $SecretObject
}